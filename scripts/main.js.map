{
  "version": 3,
  "sources": ["../src/module.js", "../src/actor.js", "../src/sheet.js", "../src/main.js"],
  "sourcesContent": ["export const MODULE_ID = 'pf2e-spells-summary'\r\n\r\nexport function templatePath(template) {\r\n    return `modules/${MODULE_ID}/templates/${template}.hbs`\r\n}\r\n\r\nexport function getSetting(setting) {\r\n    return game.settings.get(MODULE_ID, setting)\r\n}\r\n\r\nexport function localeCompare(a, b) {\r\n    return a.localeCompare(b, game.i18n.lang)\r\n}\r\n", "import { MODULE_ID, getSetting, localeCompare } from './module'\r\n\r\nexport async function getData(actor) {\r\n    const focusPool = actor.system.resources.focus ?? { value: 0, max: 0 }\r\n    const stavesActive = game.modules.get('pf2e-staves')?.active\r\n    const spells = []\r\n    const focuses = []\r\n\r\n    let hasFocusCantrips = false\r\n\r\n    await Promise.all(\r\n        actor.spellcasting.regular.map(async entry => {\r\n            const entryId = entry.id\r\n            const entryDc = entry.statistic.dc.value\r\n            const entryName = entry.name\r\n            const data = await entry.getSheetData()\r\n            const isFocus = data.isFocusPool\r\n            const isCharge = entry.system?.prepared?.value === 'charge'\r\n            const isStaff = getProperty(entry, 'flags.pf2e-staves.staveID') !== undefined\r\n            const charges = { value: getProperty(entry, 'flags.pf2e-staves.charges') ?? 0 }\r\n\r\n            for (const slot of data.levels) {\r\n                if (!slot.active.length || slot.uses?.max === 0) continue\r\n\r\n                const slotSpells = []\r\n                const isCantrip = slot.isCantrip\r\n                const actives = slot.active.filter(x => x && x.uses?.max !== 0)\r\n                const isBroken = !isCantrip && isCharge && !stavesActive\r\n\r\n                for (let slotId = 0; slotId < actives.length; slotId++) {\r\n                    const { spell, expended, virtual, uses, castLevel } = actives[slotId]\r\n\r\n                    slotSpells.push({\r\n                        name: spell.name,\r\n                        img: spell.img,\r\n                        range: spell.system.range.value || '-',\r\n                        castLevel: castLevel ?? spell.level,\r\n                        slotId,\r\n                        entryId,\r\n                        entryDc,\r\n                        entryName,\r\n                        itemId: spell.id,\r\n                        inputId: data.isInnate ? spell.id : data.id,\r\n                        inputPath: isCharge\r\n                            ? 'flags.pf2e-staves.charges'\r\n                            : data.isInnate\r\n                            ? 'system.location.uses.value'\r\n                            : `system.slots.slot${slot.level}.value`,\r\n                        isCharge,\r\n                        isActiveCharge: isCharge && stavesActive,\r\n                        isBroken,\r\n                        isVirtual: virtual,\r\n                        isInnate: data.isInnate,\r\n                        isCantrip: isCantrip,\r\n                        isFocus,\r\n                        isPrepared: data.isPrepared,\r\n                        isSpontaneous: data.isSpontaneous || data.isFlexible,\r\n                        slotLevel: slot.level,\r\n                        uses: uses ?? (isCharge ? charges : slot.uses),\r\n                        expended: expended ?? (isFocus && !isCantrip ? focusPool.value <= 0 : false),\r\n                        action: spell.system.time.value,\r\n                        type: isCharge\r\n                            ? isStaff\r\n                                ? `${MODULE_ID}.staff`\r\n                                : `${MODULE_ID}.charges`\r\n                            : data.isInnate\r\n                            ? 'PF2E.PreparationTypeInnate'\r\n                            : data.isSpontaneous\r\n                            ? 'PF2E.PreparationTypeSpontaneous'\r\n                            : data.isFlexible\r\n                            ? 'PF2E.SpellFlexibleLabel'\r\n                            : isFocus\r\n                            ? 'PF2E.SpellFocusLabel'\r\n                            : 'PF2E.SpellPreparedLabel',\r\n                        order: isCharge ? 0 : data.isPrepared ? 1 : isFocus ? 2 : data.isInnate ? 3 : data.isSpontaneous ? 4 : 5,\r\n                        noHover: data.isPrepared || isCantrip || isBroken || isFocus,\r\n                    })\r\n                }\r\n\r\n                if (slotSpells.length) {\r\n                    if (isFocus) {\r\n                        if (isCantrip) hasFocusCantrips = true\r\n                        else {\r\n                            focuses.push(...slotSpells)\r\n                            continue\r\n                        }\r\n                    }\r\n\r\n                    spells[slot.level] ??= []\r\n                    spells[slot.level].push(...slotSpells)\r\n                }\r\n            }\r\n        })\r\n    )\r\n\r\n    if (spells.length) {\r\n        const sort = getSetting('order')\r\n            ? (a, b) => (a.order === b.order ? localeCompare(a.name, b.name) : a.order - b.order)\r\n            : (a, b) => localeCompare(a.name, b.name)\r\n        spells.forEach(entry => entry.sort(sort))\r\n    }\r\n\r\n    if (focuses.length) {\r\n        focuses.sort((a, b) => localeCompare(a.name, b.name))\r\n        spells[12] = focuses\r\n        hasFocusCantrips = false\r\n    }\r\n\r\n    const ritualData = await actor.spellcasting.ritual?.getSheetData()\r\n    const rituals = ritualData?.levels.flatMap((slot, slotId) =>\r\n        slot.active\r\n            .map(({ spell }) => ({\r\n                name: spell.name,\r\n                img: spell.img,\r\n                slotId,\r\n                itemId: spell.id,\r\n                level: spell.level,\r\n                time: spell.system.time.value,\r\n            }))\r\n            .filter(Boolean)\r\n    )\r\n\r\n    return {\r\n        spells,\r\n        rituals,\r\n        focusPool,\r\n        stavesActive,\r\n        hasFocusCantrips,\r\n        isOwner: actor.isOwner,\r\n    }\r\n}\r\n", "import { getData } from './actor'\r\nimport { MODULE_ID, templatePath } from './module'\r\n\r\nexport async function renderCharacterSheetPF2e(sheet, html) {\r\n    const actor = sheet.actor\r\n    if (!actor || actor.pack || !actor.id || !actor.isOfType('character')) return\r\n\r\n    const tab = getSpellcastingTab(html)\r\n\r\n    if (getProperty(sheet, `modules.${MODULE_ID}.toggled`)) tab.addClass('toggled')\r\n\r\n    getSpellcastingNav(html).on('click', event => onSpellcastingBtnToggle(event, html, sheet))\r\n    await addSummaryTab(html, sheet, actor)\r\n\r\n    if (tab.hasClass('toggled') && tab.hasClass('active')) {\r\n        sheet._restoreScrollPositions(html)\r\n    }\r\n}\r\n\r\nasync function addSummaryTab(html, sheet, actor) {\r\n    const tab = getSpellcastingTab(html)\r\n    const data = await getData(actor)\r\n\r\n    const template = await renderTemplate(templatePath('sheet'), data)\r\n\r\n    tab.append(template)\r\n    addSummaryEvents(html, sheet, actor)\r\n}\r\n\r\nfunction addSummaryEvents(html, sheet, actor) {\r\n    const summary = getSpellcastingSummarySection(html)\r\n\r\n    const inputs = summary.find('.spell-type .uses .spell-slots-input input')\r\n    inputs.on('change', event => onUsesInputChange(event, actor))\r\n    inputs.on('focus', onUsesInputFocus)\r\n    inputs.on('blur', onUsesInputBlur)\r\n\r\n    summary.find('.cast-spell').on('click', event => onCastSpell(event, actor))\r\n    summary.find('.item-toggle-prepare').on('click', event => onTogglePrepare(event, actor))\r\n    summary.find('.focus-pips').on('click contextmenu', event => onToggleFocusPool(event, actor))\r\n    summary.find('.spell-slots-increment-reset').on('click', event => onSlotsReset(event, sheet, actor))\r\n    summary.find('.item-image').on('click', event => onItemToChat(event, actor))\r\n    summary.find('.item-name > h4').on('click', event => onToggleSummary(event, sheet))\r\n}\r\n\r\nasync function onUsesInputChange(event, actor) {\r\n    event.preventDefault()\r\n\r\n    const { inputPath, entryId } = $(event.currentTarget).data()\r\n    const value = event.currentTarget.valueAsNumber\r\n    actor.updateEmbeddedDocuments('Item', [{ _id: entryId, [inputPath]: value }])\r\n}\r\n\r\nfunction onUsesInputFocus(event) {\r\n    event.preventDefault()\r\n    event.currentTarget.closest('.item')?.classList.add('hover')\r\n}\r\n\r\nfunction onUsesInputBlur(event) {\r\n    event.preventDefault()\r\n    event.currentTarget.closest('.item')?.classList.remove('hover')\r\n}\r\n\r\nfunction onTogglePrepare(event, actor) {\r\n    event.preventDefault()\r\n    const { slotLevel, slotId, entryId, expended } = $(event.currentTarget).closest('.item').data()\r\n    const collection = actor.spellcasting.collections.get(entryId)\r\n    collection?.setSlotExpendedState(slotLevel ?? 0, slotId ?? 0, expended !== true)\r\n}\r\n\r\nfunction onToggleFocusPool(event, actor) {\r\n    event.preventDefault()\r\n    const change = event.type === 'click' ? 1 : -1\r\n    const points = (actor.system.resources.focus?.value ?? 0) + change\r\n    actor.update({ 'system.resources.focus.value': points })\r\n}\r\n\r\nfunction onChargeReset(sheet, entryId) {\r\n    const original = getSpellcastingOriginalSection(sheet.element)\r\n    const entry = original.find(`.item-container.spellcasting-entry[data-item-id=${entryId}]`)\r\n    const btn = entry.find('.spell-ability-data .statistic-values a.pf2e-staves-charge')\r\n    btn[0]?.click()\r\n}\r\n\r\nfunction onSlotsReset(event, sheet, actor) {\r\n    event.preventDefault()\r\n\r\n    const { itemId, level, isCharge } = $(event.currentTarget).data()\r\n    if (!itemId) return\r\n\r\n    if (isCharge) {\r\n        onChargeReset(sheet, itemId)\r\n        return\r\n    }\r\n\r\n    const item = actor.items.get(itemId)\r\n    if (!item) return\r\n\r\n    if (item.isOfType('spellcastingEntry')) {\r\n        const slotLevel = level >= 0 && level <= 11 ? `slot${level}` : 'slot0'\r\n        const slot = item.system.slots?.[slotLevel]\r\n        if (slot) item.update({ [`system.slots.${slotLevel}.value`]: slot.max })\r\n    } else if (item.isOfType('spell')) {\r\n        const max = item.system.location.uses?.max\r\n        if (max) item.update({ 'system.location.uses.value': max })\r\n    }\r\n}\r\n\r\nfunction onCastSpell(event, actor) {\r\n    event.preventDefault()\r\n\r\n    const target = $(event.currentTarget)\r\n    if (target.prop('disabled')) return\r\n\r\n    const { itemId, slotLevel, slotId, entryId } = target.closest('.item').data()\r\n    const collection = actor.spellcasting.collections.get(entryId)\r\n    if (!collection) return\r\n\r\n    const spell = collection.get(itemId)\r\n    if (!spell) return\r\n\r\n    collection.entry.cast(spell, { slot: slotId, level: slotLevel })\r\n}\r\n\r\nasync function onToggleSummary(event, sheet) {\r\n    const item = event.currentTarget.closest('.item')\r\n    await sheet.itemRenderer.toggleSummary(item)\r\n}\r\n\r\nasync function onItemToChat(event, actor) {\r\n    const itemId = $(event.currentTarget).closest('.item').attr('data-item-id')\r\n    const item = actor.items.get(itemId)\r\n    if (!item || (item.isOfType('physical') && !item.isIdentified)) return\r\n    await item.toMessage(event)\r\n}\r\n\r\nfunction onSpellcastingBtnToggle(event, html, sheet) {\r\n    event.preventDefault()\r\n\r\n    const tab = getSpellcastingTab(html)\r\n\r\n    if (tab.hasClass('active')) {\r\n        tab.toggleClass('toggled')\r\n        tab.scrollTop(0)\r\n        setProperty(sheet, `modules.${MODULE_ID}.toggled`, tab.hasClass('toggled'))\r\n    }\r\n}\r\n\r\nfunction getSpellcastingNav(html) {\r\n    return html.find('nav.sheet-navigation .item[data-tab=spellcasting]')\r\n}\r\n\r\nfunction getSpellcastingTab(html) {\r\n    return html.find('section.sheet-body .sheet-content > .tab[data-tab=spellcasting]')\r\n}\r\n\r\nfunction getSpellcastingOriginalSection(html) {\r\n    return getSpellcastingTab(html).find('.directory-list.spellcastingEntry-list')\r\n}\r\n\r\nfunction getSpellcastingSummarySection(html) {\r\n    return getSpellcastingTab(html).find('.directory-list.summary')\r\n}\r\n", "import { MODULE_ID } from './module'\r\nimport { renderCharacterSheetPF2e } from './sheet'\r\n\r\nHooks.on('renderCharacterSheetPF2e', renderCharacterSheetPF2e)\r\n\r\nHooks.once('ready', () => {\r\n    game.settings.register(MODULE_ID, 'order', {\r\n        name: `${MODULE_ID}.settings.order.name`,\r\n        hint: `${MODULE_ID}.settings.order.hint`,\r\n        type: Boolean,\r\n        default: false,\r\n        config: true,\r\n        scope: 'client',\r\n        onChange: refreshSheets,\r\n    })\r\n})\r\n\r\nfunction refreshSheets() {\r\n    Object.values(ui.windows).forEach(win => win instanceof ActorSheet && win.actor.type === 'character' && win.render())\r\n}\r\n"],
  "mappings": "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",
  "names": ["MODULE_ID", "templatePath", "template", "__name", "getSetting", "setting", "localeCompare", "a", "b", "getData", "actor", "focusPool", "stavesActive", "spells", "focuses", "hasFocusCantrips", "entry", "entryId", "entryDc", "entryName", "data", "isFocus", "isCharge", "isStaff", "charges", "slot", "slotSpells", "isCantrip", "actives", "x", "isBroken", "slotId", "spell", "expended", "virtual", "uses", "castLevel", "MODULE_ID", "sort", "getSetting", "a", "b", "localeCompare", "rituals", "__name", "renderCharacterSheetPF2e", "sheet", "html", "actor", "tab", "getSpellcastingTab", "MODULE_ID", "getSpellcastingNav", "event", "onSpellcastingBtnToggle", "addSummaryTab", "__name", "data", "getData", "template", "templatePath", "addSummaryEvents", "summary", "getSpellcastingSummarySection", "inputs", "onUsesInputChange", "onUsesInputFocus", "onUsesInputBlur", "onCastSpell", "onTogglePrepare", "onToggleFocusPool", "onSlotsReset", "onItemToChat", "onToggleSummary", "inputPath", "entryId", "value", "slotLevel", "slotId", "expended", "change", "points", "onChargeReset", "getSpellcastingOriginalSection", "itemId", "level", "isCharge", "item", "slot", "max", "target", "collection", "spell", "renderCharacterSheetPF2e", "MODULE_ID", "refreshSheets", "win", "__name"]
}
